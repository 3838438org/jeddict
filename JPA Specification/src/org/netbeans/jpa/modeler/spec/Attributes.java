//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.01.21 at 01:52:19 PM IST
//
package org.netbeans.jpa.modeler.spec;

import java.util.ArrayList;
import java.util.List;
import static java.util.stream.Collectors.toList;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.eclipse.persistence.internal.jpa.metadata.accessors.classes.XMLAttributes;
import org.netbeans.jpa.modeler.db.accessor.IdSpecAccessor;
import org.netbeans.jpa.modeler.db.accessor.VersionSpecAccessor;
import org.netbeans.jpa.modeler.spec.extend.Attribute;
import org.netbeans.jpa.modeler.spec.extend.BaseAttributes;
import org.netbeans.jpa.modeler.spec.extend.IPersistenceAttributes;
import org.netbeans.jpa.source.JavaSourceParserUtil;

/**
 *
 *
 * This element contains the entity field or property mappings. It may be
 * sparsely populated to include only a subset of the fields or properties. If
 * metadata-complete for the entity is true then the remainder of the attributes
 * will be defaulted according to the default rules.
 *
 *
 *
 * <p>
 * Java class for attributes complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="attributes">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;choice>
 *           &lt;element name="id" type="{http://java.sun.com/xml/ns/persistence/orm}id" maxOccurs="unbounded" minOccurs="0"/>
 *           &lt;element name="embedded-id" type="{http://java.sun.com/xml/ns/persistence/orm}embedded-id" minOccurs="0"/>
 *         &lt;/choice>
 *         &lt;element name="basic" type="{http://java.sun.com/xml/ns/persistence/orm}basic" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="version" type="{http://java.sun.com/xml/ns/persistence/orm}version" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="many-to-one" type="{http://java.sun.com/xml/ns/persistence/orm}many-to-one" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="one-to-many" type="{http://java.sun.com/xml/ns/persistence/orm}one-to-many" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="one-to-one" type="{http://java.sun.com/xml/ns/persistence/orm}one-to-one" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="many-to-many" type="{http://java.sun.com/xml/ns/persistence/orm}many-to-many" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="element-collection" type="{http://java.sun.com/xml/ns/persistence/orm}element-collection" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="embedded" type="{http://java.sun.com/xml/ns/persistence/orm}embedded" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="transient" type="{http://java.sun.com/xml/ns/persistence/orm}transient" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "attributes", propOrder = {
    "description",
    "id",
    "embeddedId",
    "version"
})
public class Attributes extends BaseAttributes implements IPersistenceAttributes {

    protected String description;
    protected List<Id> id;
    @XmlElement(name = "embedded-id")
    protected EmbeddedId embeddedId; //REVENG PENDING //findAllAttribute PENDING //isAttributeExist PENDING
    protected List<Version> version;

    @Override
    public void load(EntityMappings entityMappings, TypeElement typeElement, boolean fieldAccess) {

        VariableElement embeddedIdVariableElement = null;
        for (ExecutableElement method : JavaSourceParserUtil.getMethods(typeElement)) {
            String methodName = method.getSimpleName().toString();
            if (methodName.startsWith("get")) {
                Element element;
                VariableElement variableElement = JavaSourceParserUtil.guessField(method);
                // Issue Fix #5976 Start
                /**
                 * #5976 FIX fixed NPE when method is not attached to field
                 * Transient or in
                 *
                 * @author Juraj Balaz <georgeeb@java.net>
                 * @since Thu, 17 Apr 2014 14:07:11 +0000
                 */
                // skip processing if the method is not joined with field
                // might be transient method or method implementation from some interface
                if (variableElement == null) {
                    continue;
                }
                // Issue Fix #5976 End
                if (fieldAccess) {
                    element = variableElement;
                } else {
                    element = method;
                }

                if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.Id")
                        && !(JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.OneToOne")
                        || JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.ManyToOne"))) {
                    this.getId().add(Id.load(element, variableElement));
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.Basic")) {
                    this.getBasic().add(Basic.load(element, variableElement));
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.Transient")) {
                    this.getTransient().add(Transient.load(element, variableElement));
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.Version")) {
                    this.getVersion().add(Version.load(element, variableElement));
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.ElementCollection")) {
                    this.getElementCollection().add(ElementCollection.load(entityMappings, element, variableElement));
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.OneToOne")) {
                    OneToOne oneToOneObj = new OneToOne();
                    this.getOneToOne().add(oneToOneObj);
                    oneToOneObj.load(element, variableElement);
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.ManyToOne")) {
                    ManyToOne manyToOneObj = new ManyToOne();
                    this.getManyToOne().add(manyToOneObj);
                    manyToOneObj.load(element, variableElement);
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.OneToMany")) {
                    OneToMany oneToManyObj = new OneToMany();
                    this.getOneToMany().add(oneToManyObj);
                    oneToManyObj.load(element, variableElement);
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.ManyToMany")) {
                    ManyToMany manyToManyObj = new ManyToMany();
                    this.getManyToMany().add(manyToManyObj);
                    manyToManyObj.load(element, variableElement);
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.EmbeddedId")) {
                    this.setEmbeddedId(EmbeddedId.load(entityMappings, element, variableElement));
                    embeddedIdVariableElement = variableElement;
                } else if (JavaSourceParserUtil.isAnnotatedWith(element, "javax.persistence.Embedded")) {
                    this.getEmbedded().add(Embedded.load(entityMappings, element, variableElement));
                } else {
                    this.getBasic().add(Basic.load(element, variableElement)); //Default Annotation
                }

            }
//            else if (!methodName.startsWith("set")) {
//            }
        }

        if (this.getEmbeddedId() != null) {
            for (VariableElement variableElement : JavaSourceParserUtil.getFields(JavaSourceParserUtil.getAttributeTypeElement(embeddedIdVariableElement))) {
                this.getId().add(Id.load(variableElement, variableElement));
            }
        }

    }

    @Override
    public List<Attribute> findAllAttribute(String name) {
        List<Attribute> attributes = super.findAllAttribute(name);
        if (id != null) {
            for (Id id_TMP : id) {
                if (id_TMP.getName() != null && id_TMP.getName().equals(name)) {
                    attributes.add(id_TMP);
                }
            }
        }
        if (version != null) {
            for (Version version_TMP : version) {
                if (version_TMP.getName() != null && version_TMP.getName().equals(name)) {
                    attributes.add(version_TMP);
                }
            }
        }

        return attributes;
    }

    @Override
    public boolean isAttributeExist(String name) {
        if (super.isAttributeExist(name)) {
            return true;
        }
        if (id != null) {
            for (Id id_TMP : id) {
                if (id_TMP.getName() != null && id_TMP.getName().equals(name)) {
                    return true;
                }
            }
        }
        if (version != null) {
            for (Version version_TMP : version) {
                if (version_TMP.getName() != null && version_TMP.getName().equals(name)) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Gets the value of the description property.
     *
     * @return possible object is {@link String }
     *
     */
    @Override
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is {@link String }
     *
     */
    @Override
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the id property.
     *
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the id property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getId().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list {@link Id }
     *
     *
     */
    @Override
    public List<Id> getId() {
        if (id == null) {
            id = new ArrayList<Id>();
        }
        return this.id;
    }

    @Override
    public void addId(Id id) {
        this.getId().add(id);
        notifyListeners(id, "addAttribute", null, null);
    }

    @Override
    public void removeId(Id id) {
        this.getId().remove(id);
        notifyListeners(id, "removeAttribute", null, null);
    }

    /**
     * Gets the value of the embeddedId property.
     *
     * @return possible object is {@link EmbeddedId }
     *
     */
    @Override
    public EmbeddedId getEmbeddedId() {
        return embeddedId;
    }

    /**
     * Sets the value of the embeddedId property.
     *
     * @param value allowed object is {@link EmbeddedId }
     *
     */
    @Override
    public void setEmbeddedId(EmbeddedId value) {
        this.embeddedId = value;
        if (value == null) {
            notifyListeners(null, "removeAttribute", null, null);
        } else {
            notifyListeners(embeddedId, "addAttribute", null, null);
        }

    }

    /**
     * Gets the value of the version property.
     *
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the version property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVersion().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list {@link Version }
     *
     *
     */
    @Override
    public List<Version> getVersion() {
        if (version == null) {
            version = new ArrayList<Version>();
        }
        return this.version;
    }

    @Override
    public void addVersion(Version version) {
        this.getVersion().add(version);
        notifyListeners(version, "addAttribute", null, null);
    }

    @Override
    public void removeVersion(Version version) {
        this.getVersion().remove(version);
        notifyListeners(version, "removeAttribute", null, null);
    }

    @Override
    public List<Attribute> getAllAttribute() {
        List<Attribute> attributes = super.getAllAttribute();
        attributes.addAll(this.getId());
       if(this.getEmbeddedId()!=null){ 
           attributes.add(this.getEmbeddedId());
       }
        attributes.addAll(this.getVersion());
        return attributes;
    }

    @Override
    public XMLAttributes getAccessor() {
        XMLAttributes attr = super.getAccessor();
        attr.setIds(new ArrayList<>());
        attr.setVersions(new ArrayList<>());
        return updateAccessor(attr);
    }
    
    @Override
    public XMLAttributes updateAccessor(XMLAttributes attr) {
        super.updateAccessor(attr);
        return processAccessor(attr);
    }
    
    private XMLAttributes processAccessor(XMLAttributes attr) {
        attr.getIds().addAll(getId().stream().map(IdSpecAccessor::getInstance).collect(toList()));
        attr.getVersions().addAll(getVersion().stream().map(VersionSpecAccessor::getInstance).collect(toList()));
        if (getEmbeddedId() != null) {
            attr.setEmbeddedId(getEmbeddedId().getAccessor());
        }
        return attr;
    }
}
