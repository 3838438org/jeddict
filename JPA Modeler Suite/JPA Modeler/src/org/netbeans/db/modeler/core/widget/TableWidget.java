/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.db.modeler.core.widget;

import java.util.ArrayList;
import java.util.List;
import org.netbeans.jpa.modeler.core.widget.*;
import javax.swing.JOptionPane;
import org.netbeans.db.modeler.spec.Column;
import org.netbeans.db.modeler.spec.Table;
import org.netbeans.db.modeler.specification.model.scene.DBModelerScene;
import org.netbeans.jpa.modeler.core.widget.attribute.base.BasicAttributeWidget;
import org.netbeans.jpa.modeler.rules.entity.EntityValidator;
import org.netbeans.jpa.modeler.spec.Basic;
import org.netbeans.jpa.modeler.spec.extend.JavaClass;
import org.netbeans.modeler.core.NBModelerUtil;
import org.netbeans.modeler.widget.node.info.NodeWidgetInfo;
import org.netbeans.modeler.widget.properties.handler.PropertyChangeListener;
import org.openide.util.NbBundle;

public class TableWidget<E extends Table> extends FlowNodeWidget<E,DBModelerScene> {

    private final List<ColumnWidget> columnWidgets = new ArrayList<>();

    public TableWidget(DBModelerScene scene, NodeWidgetInfo node) {
        super(scene, node);
        this.addPropertyChangeListener("name", (PropertyChangeListener<String>) (String value) -> {
            if (value == null || value.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, NbBundle.getMessage(EntityValidator.class, EntityValidator.EMPTY_CLASS_NAME));
                setName(TableWidget.this.getLabel());//rollback
            } else {
                setName(value);
                setLabel(value);
            }
        });
        this.setImage(this.getNodeWidgetInfo().getModelerDocument().getImage());
    }

    
    public ColumnWidget addNewColumn(String name, Column column) {
        Table table =  this.getBaseElementSpec();

        if (column == null) {
            column = new Column();
            column.setId(NBModelerUtil.getAutoGeneratedStringId());
//            column.setAttributeType("String");
            column.setName(name);
            table.addColumn(column);
        }
        ColumnWidget columnWidget = (ColumnWidget) createPinWidget(ColumnWidget.create(column.getId(), name));
        columnWidgets.add(columnWidget);
        columnWidget.setBaseElementSpec(column);
//        sortAttributes();
        return columnWidget;
    }


//    public abstract void deleteAttribute(AttributeWidget attributeWidget);

//    public abstract void sortAttributes();

    @Override
    public void setName(String name) {

        if (name != null && !name.trim().isEmpty()) {
            this.name = name.replaceAll("\\s+", "");
            getBaseElementSpec().setName(this.name);
        }
//        if (JavaPersistenceQLKeywords.isKeyword(TableWidget.this.getName())) {
//            throwError(EntityValidator.CLASS_NAME_WITH_JPQL_KEYWORD);
//        } else {
//            clearError(EntityValidator.CLASS_NAME_WITH_JPQL_KEYWORD);
//        }
//        DBMapping entityMapping = TableWidget.this.getModelerScene().getBaseElementSpec();
//        if (entityMapping.findAllEntity(TableWidget.this.getName()).size() > 1) {
//            throwError(EntityValidator.NON_UNIQUE_ENTITY_NAME);
//        } else {
//            clearError(EntityValidator.NON_UNIQUE_ENTITY_NAME);
//        }

    }

    @Override
    public void setLabel(String label) {
        if (label != null && !label.trim().isEmpty()) {
            this.setNodeName(label.replaceAll("\\s+", ""));
        }
    }

}
