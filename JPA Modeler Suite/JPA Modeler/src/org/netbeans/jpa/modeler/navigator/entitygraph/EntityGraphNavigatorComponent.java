/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jpa.modeler.navigator.entitygraph;

import org.netbeans.jpa.modeler.navigator.overrideview.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.jpa.modeler.core.widget.EntityWidget;
import org.netbeans.modeler.node.ModelerNavigationNode;
import org.netbeans.modeler.properties.view.manager.BasePropertyViewManager;
import org.netbeans.modeler.properties.view.manager.PropertyNode;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@ConvertAsProperties(
        dtd = "-//org.netbeans.jpa.modeler.navigator.entitygraph//EntityGraphNavigatorComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EntityGraphNavigatorComponent",
        iconBase = "org/netbeans/jpa/modeler/specification/model/file/JPA_FILE_ICON.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "org.netbeans.jpa.modeler.navigator.entitygraph.EntityGraphNavigatorComponent")
@ActionReference(path = "Menu/Window/JPA Modeler", position = 3333)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EntityGraphNavigatorComponentAction",
        preferredID = "EntityGraphNavigatorComponent"
)
@Messages({
    "CTL_EntityGraphNavigatorComponentAction=Entity Graph",
    "CTL_EntityGraphNavigatorComponent=Entity Graph",
    "HINT_EntityGraphNavigatorComponent=Entity Graph"
})
public final class EntityGraphNavigatorComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private transient ExplorerManager explorerManager = new ExplorerManager();
    private boolean opened;

    public EntityGraphNavigatorComponent() {
        initComponents();
        setName(Bundle.CTL_EntityGraphNavigatorComponent());
        setToolTipText(Bundle.HINT_EntityGraphNavigatorComponent());
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        hideOverrideView();
    }

    private static EntityGraphNavigatorComponent instance;

    public static EntityGraphNavigatorComponent getInstance() {
        if (instance == null) {
            instance = (EntityGraphNavigatorComponent) WindowManager.getDefault().findTopComponent("EntityGraphNavigatorComponent");
        }
        return instance;
    }

    private EntityWidget entityWidget;

    public void showOverrideView() {
        if (!((OutlineView) navigatorPane).isVisible()) {
            ((OutlineView) navigatorPane).setVisible(true);
        }
        overrideViewTypeComboBox.setEnabled(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                overrideViewTypeComboBoxActionPerformed();
            }
        });

    }

    public void hideOverrideView() {
        this.entityWidget = null;
        ((OutlineView) navigatorPane).setVisible(false);
        overrideViewTypeComboBox.setEnabled(false);
    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootLayeredPane = new javax.swing.JLayeredPane();
        overrideViewTypeComboBox = new javax.swing.JComboBox();
        navigatorPane = new OutlineView();

        setLayout(new java.awt.BorderLayout());

        rootLayeredPane.setLayout(new java.awt.BorderLayout());

        overrideViewTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Attribute & Association Override", "Attribute Override", "Association Override" }));
        overrideViewTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overrideViewTypeComboBoxActionPerformed(evt);
            }
        });
        rootLayeredPane.add(overrideViewTypeComboBox, java.awt.BorderLayout.NORTH);
        rootLayeredPane.add(navigatorPane, java.awt.BorderLayout.CENTER);

        add(rootLayeredPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void overrideViewTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overrideViewTypeComboBoxActionPerformed
        overrideViewTypeComboBoxActionPerformed();
    }//GEN-LAST:event_overrideViewTypeComboBoxActionPerformed

    private void overrideViewTypeComboBoxActionPerformed() {
        if (entityWidget != null) {
                explorerManager.setRootContext(new EntityGraphRootNode(entityWidget , new EGEntityChildFactory(entityWidget)));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane navigatorPane;
    private javax.swing.JComboBox overrideViewTypeComboBox;
    private javax.swing.JLayeredPane rootLayeredPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        TopComponent.getRegistry().addPropertyChangeListener(this);
        opened = true;
    }

    @Override
    public void componentClosed() {
        TopComponent.getRegistry().removePropertyChangeListener(this);
        opened = false;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (opened && "currentNodes".equals(evt.getPropertyName())) {
            Node[] nodes = TopComponent.getRegistry().getCurrentNodes();
            if (nodes != null && nodes.length == 1) {
                if (nodes[0] instanceof ModelerNavigationNode || nodes[0] instanceof PropertyNode) {
                    //skip AbstractNode Selection in OverrideView Window
                } else if (nodes[0] instanceof BasePropertyViewManager && ((BasePropertyViewManager) nodes[0]).getBaseElementWidget() instanceof EntityWidget) {

                    EntityWidget entityWidget_Tmp = (EntityWidget) ((BasePropertyViewManager) nodes[0]).getBaseElementWidget();
                    if (this.entityWidget != entityWidget_Tmp) {
                        this.entityWidget = entityWidget_Tmp;
                        showOverrideView();
                    }

                } else {
                    //modeelrscene , mappedSuperclass , embeddable click
                    hideOverrideView();
                }
            } else if (nodes != null && nodes.length == 0) {
                //skip overrideViewTypeComboBox selected
            } else if (nodes == null) {
                //skip properties textfield click
            } else {
                hideOverrideView();
            }
        } else if ("tcClosed".equals(evt.getPropertyName())) {
            hideOverrideView();
        } else if ("tcOpened".equals(evt.getPropertyName()) && this.entityWidget == null) {
            hideOverrideView();
        }

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

}
